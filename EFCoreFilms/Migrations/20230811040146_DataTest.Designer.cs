// <auto-generated />
using System;
using EFCoreFilms;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace EFCoreFilms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230811040146_DataTest")]
    partial class DataTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CinemaRoomFilms", b =>
                {
                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.Property<int>("cinemaRoomsId")
                        .HasColumnType("int");

                    b.HasKey("FilmsId", "cinemaRoomsId");

                    b.HasIndex("cinemaRoomsId");

                    b.ToTable("CinemaRoomFilms");

                    b.HasData(
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 3
                        },
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 4
                        },
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 1
                        },
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 2
                        },
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 5
                        },
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 6
                        },
                        new
                        {
                            FilmsId = 5,
                            cinemaRoomsId = 7
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Thomas Stanley Holland (Kingston upon Thames, Londres; 1 de junio de 1996), conocido simplemente como Tom Holland, es un actor, actor de voz y bailarín británico.",
                            BirthDate = new DateTime(1996, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tom Holland"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Samuel Leroy Jackson (Washington D. C., 21 de diciembre de 1948), conocido como Samuel L. Jackson, es un actor y productor de cine, televisión y teatro estadounidense. Ha sido candidato al premio Óscar, a los Globos de Oro y al Premio del Sindicato de Actores, así como ganador de un BAFTA al mejor actor de reparto.",
                            BirthDate = new DateTime(1948, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Samuel L. Jackson"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Robert John Downey Jr. (Nueva York, 4 de abril de 1965) es un actor, actor de voz, productor y cantante estadounidense. Inició su carrera como actor a temprana edad apareciendo en varios filmes dirigidos por su padre, Robert Downey Sr., y en su infancia estudió actuación en varias academias de Nueva York.",
                            BirthDate = new DateTime(1965, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Robert Downey Jr."
                        },
                        new
                        {
                            Id = 4,
                            BirthDate = new DateTime(1981, 6, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chris Evans"
                        },
                        new
                        {
                            Id = 5,
                            BirthDate = new DateTime(1972, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dwayne Johnson"
                        },
                        new
                        {
                            Id = 6,
                            BirthDate = new DateTime(2000, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auli'i Cravalho"
                        },
                        new
                        {
                            Id = 7,
                            BirthDate = new DateTime(1984, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = 8,
                            BirthDate = new DateTime(1964, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Keanu Reeves"
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.939248 18.469649)"),
                            Name = "Acropolis"
                        },
                        new
                        {
                            Id = 2,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.911582 18.482455)"),
                            Name = "Sambil"
                        },
                        new
                        {
                            Id = 3,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.856309 18.506662)"),
                            Name = "Megacentro"
                        },
                        new
                        {
                            Id = 1,
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=4326;POINT (-69.9388777 18.4839233)"),
                            Name = "Agora Mall"
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.CinemaOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId")
                        .IsUnique();

                    b.ToTable("CinemaOffers");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CinemaId = 4,
                            DiscountPercentage = 15m,
                            EndDate = new DateTime(2023, 8, 15, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            Id = 1,
                            CinemaId = 1,
                            DiscountPercentage = 10m,
                            EndDate = new DateTime(2023, 8, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            StartDate = new DateTime(2023, 8, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.CinemaRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<int>("CinemaType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.ToTable("CinemaRooms");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CinemaId = 3,
                            CinemaType = 1,
                            Price = 250m
                        },
                        new
                        {
                            Id = 6,
                            CinemaId = 3,
                            CinemaType = 2,
                            Price = 330m
                        },
                        new
                        {
                            Id = 7,
                            CinemaId = 3,
                            CinemaType = 3,
                            Price = 450m
                        },
                        new
                        {
                            Id = 8,
                            CinemaId = 4,
                            CinemaType = 1,
                            Price = 250m
                        },
                        new
                        {
                            Id = 1,
                            CinemaId = 1,
                            CinemaType = 1,
                            Price = 220m
                        },
                        new
                        {
                            Id = 2,
                            CinemaId = 1,
                            CinemaType = 2,
                            Price = 320m
                        },
                        new
                        {
                            Id = 3,
                            CinemaId = 2,
                            CinemaType = 1,
                            Price = 200m
                        },
                        new
                        {
                            Id = 4,
                            CinemaId = 2,
                            CinemaType = 2,
                            Price = 290m
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.FilmActor", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<string>("Character")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("FilmsActors");

                    b.HasData(
                        new
                        {
                            FilmId = 4,
                            ActorId = 2,
                            Character = "Samuel L. Jackson",
                            Order = 2
                        },
                        new
                        {
                            FilmId = 4,
                            ActorId = 1,
                            Character = "Peter Parker",
                            Order = 1
                        },
                        new
                        {
                            FilmId = 3,
                            ActorId = 1,
                            Character = "Peter Parker",
                            Order = 1
                        },
                        new
                        {
                            FilmId = 1,
                            ActorId = 3,
                            Character = "Iron Man",
                            Order = 2
                        },
                        new
                        {
                            FilmId = 1,
                            ActorId = 7,
                            Character = "Black Widow",
                            Order = 3
                        },
                        new
                        {
                            FilmId = 1,
                            ActorId = 4,
                            Character = "Capitán América",
                            Order = 1
                        },
                        new
                        {
                            FilmId = 5,
                            ActorId = 8,
                            Character = "Neo",
                            Order = 1
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.Films", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("OnBillboard")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("posterURL")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OnBillboard = false,
                            ReleaseDate = new DateTime(2012, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Avengers",
                            posterURL = "https://upload.wikimedia.org/wikipedia/en/8/8a/The_Avengers_%282012_film%29_poster.jpg"
                        },
                        new
                        {
                            Id = 2,
                            OnBillboard = false,
                            ReleaseDate = new DateTime(2017, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Coco",
                            posterURL = "https://upload.wikimedia.org/wikipedia/en/9/98/Coco_%282017_film%29_poster.jpg"
                        },
                        new
                        {
                            Id = 3,
                            OnBillboard = false,
                            ReleaseDate = new DateTime(2021, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: No way home",
                            posterURL = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg"
                        },
                        new
                        {
                            Id = 4,
                            OnBillboard = false,
                            ReleaseDate = new DateTime(2019, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: Far From Home",
                            posterURL = "https://upload.wikimedia.org/wikipedia/en/0/00/Spider-Man_No_Way_Home_poster.jpg"
                        },
                        new
                        {
                            Id = 5,
                            OnBillboard = true,
                            ReleaseDate = new DateTime(2100, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Matrix Resurrections",
                            posterURL = "https://upload.wikimedia.org/wikipedia/en/5/50/The_Matrix_Resurrections.jpg"
                        });
                });

            modelBuilder.Entity("EFCoreFilms.entities.Gender", b =>
                {
                    b.Property<int>("Identifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Identifier"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Identifier");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Identifier = 1,
                            Name = "Acción"
                        },
                        new
                        {
                            Identifier = 2,
                            Name = "Animación"
                        },
                        new
                        {
                            Identifier = 3,
                            Name = "Comedia"
                        },
                        new
                        {
                            Identifier = 4,
                            Name = "Ciencia ficción"
                        },
                        new
                        {
                            Identifier = 5,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("FilmsGender", b =>
                {
                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.Property<int>("GendersIdentifier")
                        .HasColumnType("int");

                    b.HasKey("FilmsId", "GendersIdentifier");

                    b.HasIndex("GendersIdentifier");

                    b.ToTable("FilmsGender");

                    b.HasData(
                        new
                        {
                            FilmsId = 1,
                            GendersIdentifier = 1
                        },
                        new
                        {
                            FilmsId = 1,
                            GendersIdentifier = 4
                        },
                        new
                        {
                            FilmsId = 2,
                            GendersIdentifier = 2
                        },
                        new
                        {
                            FilmsId = 3,
                            GendersIdentifier = 4
                        },
                        new
                        {
                            FilmsId = 3,
                            GendersIdentifier = 1
                        },
                        new
                        {
                            FilmsId = 3,
                            GendersIdentifier = 3
                        },
                        new
                        {
                            FilmsId = 4,
                            GendersIdentifier = 4
                        },
                        new
                        {
                            FilmsId = 4,
                            GendersIdentifier = 1
                        },
                        new
                        {
                            FilmsId = 4,
                            GendersIdentifier = 3
                        },
                        new
                        {
                            FilmsId = 5,
                            GendersIdentifier = 4
                        },
                        new
                        {
                            FilmsId = 5,
                            GendersIdentifier = 1
                        },
                        new
                        {
                            FilmsId = 5,
                            GendersIdentifier = 5
                        });
                });

            modelBuilder.Entity("CinemaRoomFilms", b =>
                {
                    b.HasOne("EFCoreFilms.entities.Films", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreFilms.entities.CinemaRoom", null)
                        .WithMany()
                        .HasForeignKey("cinemaRoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreFilms.entities.CinemaOffer", b =>
                {
                    b.HasOne("EFCoreFilms.entities.Cinema", null)
                        .WithOne("CinemaOffer")
                        .HasForeignKey("EFCoreFilms.entities.CinemaOffer", "CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreFilms.entities.CinemaRoom", b =>
                {
                    b.HasOne("EFCoreFilms.entities.Cinema", "Cinema")
                        .WithMany("Cinemaroom")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cinema");
                });

            modelBuilder.Entity("EFCoreFilms.entities.FilmActor", b =>
                {
                    b.HasOne("EFCoreFilms.entities.Actor", "Actor")
                        .WithMany("FilmsActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreFilms.entities.Films", "Film")
                        .WithMany("FilmsActors")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("FilmsGender", b =>
                {
                    b.HasOne("EFCoreFilms.entities.Films", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFCoreFilms.entities.Gender", null)
                        .WithMany()
                        .HasForeignKey("GendersIdentifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFCoreFilms.entities.Actor", b =>
                {
                    b.Navigation("FilmsActors");
                });

            modelBuilder.Entity("EFCoreFilms.entities.Cinema", b =>
                {
                    b.Navigation("CinemaOffer");

                    b.Navigation("Cinemaroom");
                });

            modelBuilder.Entity("EFCoreFilms.entities.Films", b =>
                {
                    b.Navigation("FilmsActors");
                });
#pragma warning restore 612, 618
        }
    }
}
